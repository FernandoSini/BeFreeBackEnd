//    public void addLikeSended(Like like) {
//        this.likesSended.add(like);
//        like.setUserSendLike(this);
//    }
//
//
//    public void removeLikeSended(Like like) {
//        this.likesSended.remove(like);
//      //  like.setUserSendLike(null);
//    }
//    public void addLikeReceived(Like like) {
//        this.likeReceived.add(like);
//        like.setUserLiked(this);
//    }
//
//    public void removeLikeReceived(Like like) {
//       this.likeReceived.remove(like);
//      //  like.setUserLiked(null);
//    }
//
////    public void setLikesSended(List<Like> likes) {
////        for(Like l: likes){
////            this.likesSended.add(l);
////        }
////    }
////
////    public void setLikeReceived(List<Like> likes) {
////        for(Like l : likes){
////            this.likeReceived.add(l);
////        }
////    }

    @PostMapping(value = "/register", produces = {"application/json", "application/xml", "application/x-yaml"},
            consumes = {"application/json", "application/xml", "application/x-yaml"})
    public UserVO createUser(@RequestBody UserVO userData) {


//        Graduation graduation = graduationServices.getGraduationById(1);
//        graduation.getUsers().add(userData);
//
//        Graduation graduation1 = graduationServices.getGraduationById(2);
//        graduation1.getUsers().add(userData);
//        Graduation graduation2 = graduationServices.getGraduationById(3);
//        graduation2.getUsers().add(userData);
//        List<Graduation> graduationList = new ArrayList<>();
//        graduationList.add(graduation);
//        graduationList.add(graduation1);
//        graduationList.add(graduation2);
//        GraduationVO graduationVO = graduationServices.getGraduationById(userData.getGraduations().get(1).getId());
//        graduationVO.getUsers().add(userData);
//        GraduationVO graduationVO2 = graduationServices.getGraduationById(2);
//        graduationVO2.getUsers().add(userData);
//        GraduationVO graduationVO3 = graduationServices.getGraduationById(3);
//        graduationVO3.getUsers().add(userData);
//        for (int i = 0; i <userData.getGraduations().size() ; i++) {
//            GraduationVO graduationVO2 = graduationServices.getGraduationById(userData.getGraduations().get(i).getId())
//        }
        List<GraduationVO> graduations = new ArrayList<>();
//
//        graduations.add(graduationVO);
//        graduations.add(graduationVO2);
//        graduations.add(graduationVO3);
        for (GraduationVO graduationVO : userData.getUserGraduations()
        ) {
            var voGraduation = graduationServices.getGraduationById(graduationVO.getId());
            graduations.add(voGraduation);
        }
        userData.setUsertype(Usertype.FREE);
        userData.setUserGraduations(graduations);
        BCryptPasswordEncoder bCrypt =new  BCryptPasswordEncoder();
        userData.setPassword(bCrypt.encode(userData.getPassword()));
        userData.setEnabled(true);
        userData.setAccountNonExpired(true);
        userData.setAccountNonLocked(true);
        userData.setCredentialsNonExpired(true);

        Permission permission = new Permission();
        permission.setId(1L);
        List<Permission> permissions = new ArrayList<>();
        permissions.add(permission);



        return userServices.criandoUser(userData);

    }
